package com._520it.day02;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

//共享的资源类  并提供生产和消费的功能
public class MiddleDemo {
	private String name;
	private String gender;

	private boolean ifEmpty = true;//标志是否为空, 默认为空true
	private Lock lock = new ReentrantLock(); // 创建一个Lock对象 使用它的子类构造器
	private Condition condition = lock.newCondition();  //使用Lock的方法来 返回绑定到此 Lock 实例的新 Condition 实例。
	

	//生产
	public void production(String name, String gender) {
		lock.lock();//获取锁
		try {
			while(ifEmpty) {
				this.name = name;

				Thread.sleep(10);

				this.gender = gender;
				System.out.println("生产: " + this.name + "--" + this.gender);
				this.ifEmpty = false;
				//this.notifyAll();//唤醒所有线程--->同步锁对象调用
				condition.signalAll();//唤醒所有线程
			}
		//	this.wait();
			condition.await();
			

		} catch (InterruptedException e) {
			e.printStackTrace();
		}finally{
			lock.unlock();//释放锁
		}
	}

	//消费
	public void consumption() {
		lock.lock();//获取锁
		try {
			while(!ifEmpty) {

				Thread.sleep(10);
				System.out.println("消费: " + name + "--" + gender);
				this.ifEmpty = true;
				//this.notify();
				condition.signalAll();//唤醒所有线程
			}
			//this.wait();
			condition.signalAll();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}finally{
			lock.unlock();
		}
	}
}
