package com._520.reflex;

import java.lang.reflect.Method;
import java.util.Arrays;

/*
 * 练习使用反射调用方法
 * 
 */
public class InvocationMethodDemo {
	public static void main(String[] args) throws Exception {
		///1) 创建字节码对象  2)获取方法  3)调用Method类中的方法来实现
		Class cls = User.class;
		Method m = cls.getMethod("test");  
		m.invoke(cls.newInstance());	//调用无参数的方法
		
		m = cls.getMethod("test", String.class);  //调用有参数的方法
		m.invoke(cls.newInstance(), new Object[]{"Hello"});
		
		m = cls.getDeclaredMethod("test", String.class, int.class);
		m.setAccessible(true);
		m.invoke(cls.newInstance(), new Object[]{"Hello", 12});
		
		m = cls.getDeclaredMethod("test", Integer.class); //
		m.invoke(null, new Object[]{1234});
		
		
	}
}

class User{
	public void test(){
		System.out.println("无参数方法");
	}
	
	public void test(String name){
		System.out.println("有一个参数的方法 " + name);
	}
	
	 private void test(int ...age ){
		System.out.println("有两个参数的方法" + Arrays.toString(age));
	}
	 
	public static void test(Integer num){
		System.out.println("static修饰的方法 " + num);
	}
}
