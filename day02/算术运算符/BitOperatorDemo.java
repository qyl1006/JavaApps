//位运算符
public class BitOperatorDemo
{
	public static void main(String[] args)
	{
		/*
			遵循规则：0看做是false,1看做是true.
				  在二进制的世界中,需要都转换成二进制
					&：参与运算的两个数，若相应位数的值都为1，则该位结果值是1，否则是0。

					|：参与运算的两个数相应位中只要有一个1，结果就是1。

					^：参与运算的两个数相应位相同则结果为0，否则为1。

					~ ：表示把每个二进制位的“1”换成“0”，把“0”换成“1”。

					3的二进制: 00000011
					5的二进制: 00000101

							00000011                    
					&		00000101
			--------------------------
                            00000001 ---------1			
							
						    00000011
					|		00000101
			--------------------------
                            00000111 ---------7

						    00000011
					^		00000101
			--------------------------
                            00000110 ---------6	

						~	0000 0000 0000 0000 0000 0000 0000 0101
				------------------------------------------------------
                    原码    1111 1111 1111 1111 1111 1111 1111 1010   -------  -6
                    反码    0000 0000 0000 0000 0000 0000 0000 0101 
		            补码    0000 0000 0000 0000 0000 0000 0000 0110    ------   6
					*/                    
		System.out.println(3 & 5);
		System.out.println(3 | 5);
		System.out.println(3 ^ 5);
		System.out.println(~5);

		System.out.println(~-6);

		/*

		移位操作:
		<<：将操作数的二进制码整体左移指定位数，左移之后的空使用“0”来补充。

		>>：将操作数的二进制码整体右移指定位数，右移之后的空使用“符号位”来补充：

			若是正数使用“0”补充；

			若是负数使用“1”补充；（操作负数：取反，求补，操作，取反，求补）

		>>>：将操作数的二进制码整体右移指定位数，右移之后的空位使用“0”来补充。

				5的二进制:
					0000 0000 0000 0000 0000 0000 0000 0101
					左移3位
					   0 0000 0000 0000 0000 0000 0000 0101 000
					   0000 0000 0000 0000 0000 0000 0010 1000  -----------40

					原码 1000 0000 0000 0000 0000 0000 0010 1000 
					反码 1111 1111 1111 1111 1111 1111 1101 0111
					补码 1111 1111 1111 1111 1111 1111 1101 1000  ----  -40
					右移3位
					     1111 1111 1111 1111 1111 1111 1111 1011  -------  -5
						 0000 0000 0000 0000 0000 0000 0000 0100
						 0000 0000 0000 0000 0000 0000 0000 0101  ------5
		*/
		System.out.println("===============");
		System.out.println(5 << 3);
		System.out.println(-40 >> 3);

		System.out.println("===============");
		System.out.println(40 >>> 3);
		System.out.println(-40 >>> 3);
		
		


	}
}